version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: smk-sellerservice-db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5436:5432"
    volumes:
      - ./docker/postgres/data:/var/lib/postgresql/data
    networks:
      - smk-sellerservice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate
    container_name: smk-sellerservice-migrate
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations
    networks:
      - smk-sellerservice-network
    command: [
      "-path", "/migrations",
      "-database", "postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=${DB_SSLMODE}",
      "up"
    ]
    restart: on-failure

  app:
    build:
      context: .
      dockerfile: Dockerfile.sellerservice
    container_name: smk-sellerservice-app
    env_file:
      - .env
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSLMODE: ${DB_SSLMODE}
      HTTP_PORT: ${HTTP_PORT}
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FILE: ${LOG_FILE}
    ports:
      - "8081:8081"
    volumes:
      - ./logs:/app/logs
    networks:
      - smk-sellerservice-network
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    restart: unless-stopped

networks:
  smk-sellerservice-network:
    driver: bridge