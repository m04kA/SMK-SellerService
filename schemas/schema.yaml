openapi: 3.0.3
info:
  title: Seller Service API
  description: Сервис управления компаниями и их услугами для платформы онлайн-записи на автомойку
  version: 1.0.0

servers:
  - url: http://localhost:8081/api/v1
    description: Development server

components:
  schemas:
    Company:
      type: object
      required:
        - id
        - name
        - description
        - addresses
        - workingHours
        - managerIds
      properties:
        id:
          type: integer
          format: int64
          example: 1234567890
        name:
          type: string
          minLength: 1
          maxLength: 200
          example: "Автомойка Премиум"
        logo:
          type: string
          format: uri
          nullable: true
          example: "https://storage.example.com/logos/company-123.png"
        description:
          type: string
          minLength: 1
          maxLength: 2000
          example: "Профессиональная автомойка и детейлинг в центре Москвы"
        tags:
          type: array
          items:
            type: string
            pattern: '^#[а-яА-Яa-zA-Z0-9_]+$'
          example: ["#мойка", "#детейлинг", "#москва", "#премиум"]
        addresses:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Address'
        workingHours:
          $ref: '#/components/schemas/WorkingHours'
        managerIds:
          type: array
          description: "User IDs менеджеров с доступом к управлению компанией"
          items:
            type: integer
            format: int64
          example: [123456789]
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    Address:
      type: object
      required:
        - id
        - city
        - street
        - building
        - coordinates
      properties:
        id:
          type: integer
          format: int64
          example: 9876543210
        city:
          type: string
          example: "Москва"
        street:
          type: string
          example: "Тверская улица"
        building:
          type: string
          example: "10к1"
        coordinates:
          $ref: '#/components/schemas/Coordinates'

    Coordinates:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
          example: 55.755826
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
          example: 37.617299

    WorkingHours:
      type: object
      description: "Рабочие часы по дням недели"
      required:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
      properties:
        monday:
          $ref: '#/components/schemas/DaySchedule'
        tuesday:
          $ref: '#/components/schemas/DaySchedule'
        wednesday:
          $ref: '#/components/schemas/DaySchedule'
        thursday:
          $ref: '#/components/schemas/DaySchedule'
        friday:
          $ref: '#/components/schemas/DaySchedule'
        saturday:
          $ref: '#/components/schemas/DaySchedule'
        sunday:
          $ref: '#/components/schemas/DaySchedule'

    DaySchedule:
      type: object
      required:
        - isOpen
      properties:
        isOpen:
          type: boolean
          example: true
        openTime:
          type: string
          pattern: '^([0-1][0-9]|2[0-3]):[0-5][0-9]$'
          example: "09:00"
          description: "Требуется если isOpen=true"
        closeTime:
          type: string
          pattern: '^([0-1][0-9]|2[0-3]):[0-5][0-9]$'
          example: "21:00"
          description: "Требуется если isOpen=true"

    Service:
      type: object
      required:
        - id
        - companyId
        - name
        - description
        - addressIds
      properties:
        id:
          type: integer
          format: int64
          example: 5555555555
        companyId:
          type: integer
          format: int64
          example: 1234567890
        name:
          type: string
          minLength: 1
          maxLength: 200
          example: "Комплексная мойка"
        description:
          type: string
          minLength: 1
          maxLength: 1000
          example: "Полная мойка кузова, дисков, ковриков и салона"
        averageDuration:
          type: integer
          description: "Среднее время выполнения услуги в минутах"
          minimum: 1
          nullable: true
          example: 60
        addressIds:
          type: array
          description: "ID адресов из Company.addresses, где оказывается услуга"
          minItems: 1
          items:
            type: integer
            format: int64
          example: [9876543210]
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    CreateCompanyRequest:
      type: object
      required:
        - name
        - description
        - addresses
        - workingHours
        - managerIds
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        logo:
          type: string
          format: uri
          nullable: true
        description:
          type: string
          minLength: 1
          maxLength: 2000
        tags:
          type: array
          items:
            type: string
            pattern: '^#[а-яА-Яa-zA-Z0-9_]+$'
        addresses:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - city
              - street
              - building
              - coordinates
            properties:
              city:
                type: string
              street:
                type: string
              building:
                type: string
              coordinates:
                $ref: '#/components/schemas/Coordinates'
        workingHours:
          $ref: '#/components/schemas/WorkingHours'
        managerIds:
          type: array
          minItems: 1
          items:
            type: integer
            format: int64

    UpdateCompanyRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        logo:
          type: string
          format: uri
          nullable: true
        description:
          type: string
          minLength: 1
          maxLength: 2000
        tags:
          type: array
          items:
            type: string
            pattern: '^#[а-яА-Яa-zA-Z0-9_]+$'
        addresses:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - city
              - street
              - building
              - coordinates
            properties:
              id:
                type: integer
                format: int64
                description: "Указывается для существующих адресов"
              city:
                type: string
              street:
                type: string
              building:
                type: string
              coordinates:
                $ref: '#/components/schemas/Coordinates'
        workingHours:
          $ref: '#/components/schemas/WorkingHours'
        managerIds:
          type: array
          minItems: 1
          items:
            type: integer
            format: int64

    CreateServiceRequest:
      type: object
      required:
        - name
        - description
        - addressIds
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          minLength: 1
          maxLength: 1000
        averageDuration:
          type: integer
          minimum: 1
          nullable: true
        addressIds:
          type: array
          minItems: 1
          items:
            type: integer
            format: int64

    UpdateServiceRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          minLength: 1
          maxLength: 1000
        averageDuration:
          type: integer
          minimum: 1
          nullable: true
        addressIds:
          type: array
          minItems: 1
          items:
            type: integer
            format: int64

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: "UNAUTHORIZED"
        message:
          type: string
          example: "User does not have permission to perform this action"
        details:
          type: object
          additionalProperties: true

  parameters:
    CompanyIdParam:
      name: companyId
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: "ID компании"

    ServiceIdParam:
      name: serviceId
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: "ID услуги"

    XUserIdHeader:
      name: X-User-ID
      in: header
      required: true
      schema:
        type: integer
        format: int64
      description: "ID текущего пользователя"

    XUserRoleHeader:
      name: X-User-Role
      in: header
      required: true
      schema:
        type: string
        enum: [superuser, user]
      description: "Роль текущего пользователя"

  responses:
    Unauthorized:
      description: "Неавторизованный доступ"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "UNAUTHORIZED"
            message: "User does not have permission to perform this action"

    Forbidden:
      description: "Доступ запрещен"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "FORBIDDEN"
            message: "Access denied"

    NotFound:
      description: "Ресурс не найден"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "NOT_FOUND"
            message: "Resource not found"

    ValidationError:
      description: "Ошибка валидации"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "VALIDATION_ERROR"
            message: "Invalid request data"

paths:
  /companies:
    post:
      summary: "Создание компании (только superuser)"
      operationId: createCompany
      tags:
        - Companies (Protected)
      parameters:
        - $ref: '#/components/parameters/XUserIdHeader'
        - $ref: '#/components/parameters/XUserRoleHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompanyRequest'
      responses:
        '201':
          description: "Компания успешно создана"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    get:
      summary: "Получение списка компаний"
      operationId: listCompanies
      tags:
        - Companies
      parameters:
        - name: tags
          in: query
          description: "Фильтр по тегам (можно несколько через запятую)"
          schema:
            type: string
          example: "#мойка,#москва"
        - name: city
          in: query
          description: "Фильтр по городу"
          schema:
            type: string
          example: "Москва"
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: "Список компаний"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Company'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer

  /companies/{companyId}:
    parameters:
      - $ref: '#/components/parameters/CompanyIdParam'

    get:
      summary: "Получение компании по ID"
      operationId: getCompany
      tags:
        - Companies
      responses:
        '200':
          description: "Данные компании"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: "Обновление компании (superuser или менеджер компании)"
      operationId: updateCompany
      tags:
        - Companies
      parameters:
        - $ref: '#/components/parameters/XUserIdHeader'
        - $ref: '#/components/parameters/XUserRoleHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCompanyRequest'
      responses:
        '200':
          description: "Компания успешно обновлена"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: "Удаление компании (только superuser)"
      operationId: deleteCompany
      tags:
        - Companies
      parameters:
        - $ref: '#/components/parameters/XUserIdHeader'
        - $ref: '#/components/parameters/XUserRoleHeader'
      responses:
        '204':
          description: "Компания успешно удалена"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /companies/{companyId}/services:
    parameters:
      - $ref: '#/components/parameters/CompanyIdParam'

    post:
      summary: "Создание услуги (superuser или менеджер компании)"
      operationId: createService
      tags:
        - Services
      parameters:
        - $ref: '#/components/parameters/XUserIdHeader'
        - $ref: '#/components/parameters/XUserRoleHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServiceRequest'
      responses:
        '201':
          description: "Услуга успешно создана"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    get:
      summary: "Получение списка услуг компании"
      operationId: listServices
      tags:
        - Services
      responses:
        '200':
          description: "Список услуг"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Service'
        '404':
          $ref: '#/components/responses/NotFound'

  /companies/{companyId}/services/{serviceId}:
    parameters:
      - $ref: '#/components/parameters/CompanyIdParam'
      - $ref: '#/components/parameters/ServiceIdParam'

    get:
      summary: "Получение услуги по ID"
      operationId: getService
      tags:
        - Services
      responses:
        '200':
          description: "Данные услуги"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: "Обновление услуги (superuser или менеджер компании)"
      operationId: updateService
      tags:
        - Services
      parameters:
        - $ref: '#/components/parameters/XUserIdHeader'
        - $ref: '#/components/parameters/XUserRoleHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateServiceRequest'
      responses:
        '200':
          description: "Услуга успешно обновлена"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: "Удаление услуги (superuser или менеджер компании)"
      operationId: deleteService
      tags:
        - Services
      parameters:
        - $ref: '#/components/parameters/XUserIdHeader'
        - $ref: '#/components/parameters/XUserRoleHeader'
      responses:
        '204':
          description: "Услуга успешно удалена"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
